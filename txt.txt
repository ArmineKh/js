https://github.com/workshopper/javascripting
https://github.com/workshopper/learnyounode
https://github.com/workshopper/scope-chains-closures
https://github.com/timoxley/functional-javascript-workshop
https://github.com/sporto/planetproto
https://github.com/excellalabs/js-best-practices-workshopper
https://github.com/kishorsharma/currying-workshopper
https://github.com/workshopper/regex-adventure
https://github.com/stevekane/promise-it-wont-hurt



balance****
var balance = 0;

module.exports = {
  canAfford: function(amount){
    if(!this.isValidAmount(amount)){
      errorMessage = "Invalid Input";
    }
    if(errorMessage){
      throw new Error(errorMessage);
    }
    return amount <= balance;
  },

  decreaseBalance: function(amount){
    // This method decreases the balance of the vending machine. If the balance amount is not 
    // enough to cover the purchase, the method throws an error. 
    var errorMessage;
    if(!this.canAfford(amount)){
        errorMessage = 'Insufficient balance';
    }
    if(errorMessage){
        throw new Error(errorMessage);
    }
    balance -= amount;
  },

  getBalance: function(){ 
    return balance;
  },

  isValidAmount: function(amount){
    if(amount === null){
      return false;
    } else {
      return true;
    }
  },
  increaseBalance: function(amount){
    balance += amount;
  },
};


product***


var products = [
  {
    name: 'Skittles',
    price: 85,
    id: 'A1'
  }
];
module.exports = {
  getProducts: function() { 
    return products;
  },

  getProduct: function(productId) {
    var product = products.find(function(p) { return p.id === productId; });
    return product;
  },
};



change*****


let coins = {
  "p" : 1,
  "n" : 5,
  "d" : 10,
  "q" : 25
}
module.exports = {
  getAmount: function(coinType) {
    // COINS:
    // [p]enny
    // [n]ickel
    // [d]ime
    // [q]uarter
    // switch(coinType){
    //   case 'p': return 1;
    //   case 'n': return 5;
    //   case 'd': return 10;
    //   case 'q': return 25;
    //   default: throw new Error('Unrecognized coin ' + coinType);
    // }
    if(coins.hasOwnProperty(coinType)){
      return coins[coinType];
    } else {
      throw new Error('Unrecognized coin ' + coinType)
    }
  },
  convertToChange: function(num){
    let result = [];
    let qCount = num % coins.q;
    for (var i = 0; i < qCount-1; i++) {
      result.push('q')
    }
    num = num - qCount*coin.q;
    let dCount = num % coins.d;
    for (var i = 0; i < dCount-1; i++) {
      result.push('d')
    }
    num num - 
  }

};


vending****


var balanceManager = require('./balanceManager');
var changeHandler = require('./changeHandler');
var productInventory = require('./productInventory');

// var balance = 0;

// var products = [
//   {
//     name: 'Skittles',
//     price: 85,
//     id: 'A1'
//   }
// ];

module.exports = {
  // canAfford: function(amount){
  //   if(!this.isValidAmount(amount)){
  //     errorMessage = "Invalid Input";
  //   }
  //   if(errorMessage){
  //     throw new Error(errorMessage);
  //   }
  //   return amount <= balance;
  // },
  // 
  // decreaseBalance: function(amount){
  //   // This method decreases the balance of the vending machine. If the balance amount is not 
  //   // enough to cover the purchase, the method throws an error. 
  //   var errorMessage;
  //   if(!this.canAfford(amount)){
  //       errorMessage = 'Insufficient balance';
  //   }
  //   if(errorMessage){
  //       throw new Error(errorMessage);
  //   }
  //   balance -= amount;
  // },

  // getAmount: function(coinType) {
  //   // COINS:
  //   // [p]enny
  //   // [n]ickel
  //   // [d]ime
  //   // [q]uarter
  //   switch(coinType){
  //     case 'p': return 1;
  //     case 'n': return 5;
  //     case 'd': return 10;
  //     case 'q': return 25;
  //     default: throw new Error('Unrecognized coin ' + coinType);
  //   }
  // },

  // getBalance: function(){ 
  //   return balance;
  // },

  // getProducts: function() { 
  //   return products;
  // },
  // 
  // getProduct: function(productId) {
  //   var product = products.find(function(p) { return p.id === productId; });
  //   return product;
  // },
  
  // increaseBalance: function(amount){
  //   balance += amount;
  // },

  insertCoin: function(coinType){
    var value = this.getAmount(coinType);
    this.increaseBalance(value);
  },

  // isValidAmount: function(amount){
  //   if(amount === null){
  //     return false;
  //   } else {
  //     return true;
  //   }
  // },

  releaseChange: function(){
    var currentBalance = this.getBalance();
    this.decreaseBalance(currentBalance);
    return this.convertToChange(currentBalance);
  },

  vendProduct: function(productId){
    var product = this.getProduct(productId);
    this.decreaseBalance(product.price);
    return product;
  }

};

